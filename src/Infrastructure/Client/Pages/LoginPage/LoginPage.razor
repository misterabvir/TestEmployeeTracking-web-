@page "/login"
@using Client.Authorizations
@using Client.Pages.Shared.Components
@using Client.Protos
@layout LoginLayout
@inject AuthenticationStateProvider _provider
@inject AuthorizeApi _authorizeApi
@inject NavigationManager _navigation

<div class="row m-2">
    <div class="col-auto">
        <input type="text" class="form-control" placeholder="email@example.com" @bind-value="_email">
    </div>
    <div class="col-auto">
        <input type="password" class="form-control" placeholder="Password" @bind-value="_password">
    </div>
    <div class="col-auto">
        <button type="submit" class="btn btn-primary" disabled=@isDisabled @onclick=OnLogin>SignIn</button>
    </div>
    <div class="col-auto">
        <button type="submit" class="btn btn-primary" disabled=@isDisabled @onclick=OnRegister>Register</button>
    </div>
</div>

<ErrorComponent Error=@_error />

@code {
    private string _email = string.Empty;
    private string _password = string.Empty;
    private bool isDisabled => string.IsNullOrWhiteSpace(_email) || string.IsNullOrWhiteSpace(_password);
    private ErrorModel? _error;
    private async Task OnLogin()
    {
        var identity = await _authorizeApi.Login(_email, _password);
        if (identity.IsSucces)
        {
            _navigation.NavigateTo("/");
        }
        else
        {
            _error = identity.Error;
        }
    }

    private async Task OnRegister()
    {
        var identity = await _authorizeApi.Register(_email, _password);
        if (identity.IsSucces)
        {
            _navigation.NavigateTo("/");
        }
        else
        {
            _error = identity.Error;
        }

    }
    protected override async Task OnInitializedAsync()
    {
        var state = await _provider.GetAuthenticationStateAsync();
        if (state.User.Identity is not null && state.User.Identity.IsAuthenticated)
        {
            _navigation.NavigateTo("/");
        }
    }
}
